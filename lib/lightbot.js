(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["lightbot"] = factory();
	else
		root["lightbot"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/cross-fetch/dist/browser-ponyfill.js":
/*!***********************************************************!*\
  !*** ./node_modules/cross-fetch/dist/browser-ponyfill.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var __root__ = (function (root) {\nfunction F() { this.fetch = false; }\nF.prototype = root;\nreturn new F();\n})(typeof self !== 'undefined' ? self : this);\n(function(self) {\n\nvar irrelevant = (function (exports) {\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  return exports;\n\n}({}));\n})(__root__);\ndelete __root__.fetch.polyfill\nmodule.exports = exports = __root__.fetch\nexports.fetch = __root__.fetch\nexports.Headers = __root__.Headers\nexports.Request = __root__.Request\nexports.Response = __root__.Response\n// Needed for TypeScript consumers without esModuleInterop.\nexports.default = __root__.fetch\n\n\n//# sourceURL=webpack://lightbot/./node_modules/cross-fetch/dist/browser-ponyfill.js?");

/***/ }),

/***/ "./src/api.ts":
/*!********************!*\
  !*** ./src/api.ts ***!
  \********************/
/*! exports provided: LightbotAPI */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LightbotAPI\", function() { return LightbotAPI; });\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ \"./node_modules/cross-fetch/dist/browser-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_0__);\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar LightbotAPI =\n/*#__PURE__*/\nfunction () {\n  function LightbotAPI(hostURL, agentId) {\n    _classCallCheck(this, LightbotAPI);\n  }\n  /**\n   * Initializes a new bot conversation\n   */\n\n\n  _createClass(LightbotAPI, [{\n    key: \"postStartConversation\",\n    value: function () {\n      var _postStartConversation = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var response, body;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this.post(\"/start\", {\n                  lightbot_agent_id: this.agentId\n                });\n\n              case 3:\n                response = _context.sent;\n                _context.next = 6;\n                return response.json();\n\n              case 6:\n                body = _context.sent;\n\n                if (!(body.data && body.data.bot)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", body.data.bot);\n\n              case 9:\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](0);\n                throw new Error(\"An error occurred while starting conversation.\");\n\n              case 14:\n                return _context.abrupt(\"return\", undefined);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 11]]);\n      }));\n\n      function postStartConversation() {\n        return _postStartConversation.apply(this, arguments);\n      }\n\n      return postStartConversation;\n    }()\n    /**\n     * Gets agent data, e.g. theme, logo, etc.\n     */\n\n  }, {\n    key: \"getAgentData\",\n    value: function () {\n      var _getAgentData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var response, body;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return this.get(\"/agent-data?lightbot_agent_id=\".concat(this.agentId));\n\n              case 3:\n                response = _context2.sent;\n                _context2.next = 6;\n                return response.json();\n\n              case 6:\n                body = _context2.sent;\n\n                if (!body.data) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", body.data);\n\n              case 9:\n                _context2.next = 14;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](0);\n                throw new Error(\"An error occurred while fetching agent data.\");\n\n              case 14:\n                return _context2.abrupt(\"return\", undefined);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 11]]);\n      }));\n\n      function getAgentData() {\n        return _getAgentData.apply(this, arguments);\n      }\n\n      return getAgentData;\n    }()\n    /**\n     * Sends a message and gets a reply back\n     * @param message string value the user typed\n     */\n\n  }, {\n    key: \"postMessage\",\n    value: function () {\n      var _postMessage = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(message) {\n        var response, body;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return this.post(\"\", {\n                  human: message,\n                  lightbot_agent_id: this.agentId\n                });\n\n              case 3:\n                response = _context3.sent;\n                _context3.next = 6;\n                return response.json();\n\n              case 6:\n                body = _context3.sent;\n\n                if (!(body.data && body.data.bot)) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", body.data.bot);\n\n              case 9:\n                _context3.next = 14;\n                break;\n\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](0);\n                throw new Error(\"An error occurred while sending a message.\");\n\n              case 14:\n                return _context3.abrupt(\"return\", undefined);\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 11]]);\n      }));\n\n      function postMessage(_x) {\n        return _postMessage.apply(this, arguments);\n      }\n\n      return postMessage;\n    }()\n    /**\n     * Sends a jump id and gets a reply back\n     * @param jump id the user selected from jump options\n     */\n\n  }, {\n    key: \"postJump\",\n    value: function () {\n      var _postJump = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(jump) {\n        var response, body;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return this.post(\"/jump\", {\n                  jump: jump,\n                  lightbot_agent_id: this.agentId\n                });\n\n              case 3:\n                response = _context4.sent;\n                _context4.next = 6;\n                return response.json();\n\n              case 6:\n                body = _context4.sent;\n\n                if (!(body.data && body.data.bot)) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", body.data.bot);\n\n              case 9:\n                _context4.next = 14;\n                break;\n\n              case 11:\n                _context4.prev = 11;\n                _context4.t0 = _context4[\"catch\"](0);\n                throw new Error(\"An error occured while sending a jump.\");\n\n              case 14:\n                return _context4.abrupt(\"return\", undefined);\n\n              case 15:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 11]]);\n      }));\n\n      function postJump(_x2) {\n        return _postJump.apply(this, arguments);\n      }\n\n      return postJump;\n    }()\n  }, {\n    key: \"post\",\n    value: function () {\n      var _post = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(endpoint, body) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return Object(cross_fetch__WEBPACK_IMPORTED_MODULE_0__[\"fetch\"])(\"\".concat(this.hostURL).concat(endpoint), {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: JSON.stringify(body)\n                });\n\n              case 2:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function post(_x3, _x4) {\n        return _post.apply(this, arguments);\n      }\n\n      return post;\n    }()\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(endpoint) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return Object(cross_fetch__WEBPACK_IMPORTED_MODULE_0__[\"fetch\"])(\"\".concat(this.hostURL).concat(endpoint));\n\n              case 2:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function get(_x5) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }]);\n\n  return LightbotAPI;\n}();\n\n//# sourceURL=webpack://lightbot/./src/api.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! exports provided: LightbotMessenger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _messenger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./messenger */ \"./src/messenger.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"LightbotMessenger\", function() { return _messenger__WEBPACK_IMPORTED_MODULE_0__[\"LightbotMessenger\"]; });\n\n\n\n//# sourceURL=webpack://lightbot/./src/index.ts?");

/***/ }),

/***/ "./src/messenger.ts":
/*!**************************!*\
  !*** ./src/messenger.ts ***!
  \**************************/
/*! exports provided: LightbotMessenger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LightbotMessenger\", function() { return LightbotMessenger; });\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"./src/api.ts\");\n/* harmony import */ var _state_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state-manager */ \"./src/state-manager.ts\");\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar LightbotMessenger =\n/*#__PURE__*/\nfunction () {\n  function LightbotMessenger(_ref) {\n    var hostURL = _ref.hostURL,\n        agentId = _ref.agentId,\n        messageListener = _ref.messageListener;\n\n    _classCallCheck(this, LightbotMessenger);\n\n    _defineProperty(this, \"stateManager\", void 0);\n\n    _defineProperty(this, \"apiClient\", void 0);\n\n    _defineProperty(this, \"messageListener\", void 0);\n\n    this.stateManager = new _state_manager__WEBPACK_IMPORTED_MODULE_1__[\"StateManager\"]();\n    this.apiClient = new _api__WEBPACK_IMPORTED_MODULE_0__[\"LightbotAPI\"](hostURL, agentId);\n\n    if (messageListener) {\n      this.messageListener = messageListener;\n    }\n  }\n  /**\n   * It will set the messenger state as open and initialize conversation\n   * in case it's needed.\n   */\n\n\n  _createClass(LightbotMessenger, [{\n    key: \"toggleMessenger\",\n    value: function () {\n      var _toggleMessenger = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.stateManager.agent.isInitialized) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.initMessenger();\n\n              case 3:\n                _context.next = 5;\n                return this.stateManager.updateAgent({\n                  isInitialized: true\n                });\n\n              case 5:\n                this.stateManager.updateLayout({\n                  isMessengerOpen: !this.stateManager.layout.isMessengerOpen\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function toggleMessenger() {\n        return _toggleMessenger.apply(this, arguments);\n      }\n\n      return toggleMessenger;\n    }()\n  }, {\n    key: \"sendMessage\",\n    value: function () {\n      var _sendMessage = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(message) {\n        var response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n\n                if (!(message.type === \"jump\")) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 4;\n                return this.apiClient.postJump(message.label);\n\n              case 4:\n                response = _context2.sent;\n                _context2.next = 10;\n                break;\n\n              case 7:\n                _context2.next = 9;\n                return this.apiClient.postMessage(message.label);\n\n              case 9:\n                response = _context2.sent;\n\n              case 10:\n                if (response) {\n                  this.stateManager.saveMessage(_objectSpread({}, response, {\n                    sender: \"bot\"\n                  }));\n                  this.pushUpdate();\n                }\n\n                _context2.next = 16;\n                break;\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](0);\n                throw new Error(\"An error occurred sending a message.\");\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 13]]);\n      }));\n\n      function sendMessage(_x) {\n        return _sendMessage.apply(this, arguments);\n      }\n\n      return sendMessage;\n    }()\n    /**\n     * Notifies the subscriber with the updated messages\n     */\n\n  }, {\n    key: \"pushUpdate\",\n    value: function pushUpdate() {\n      if (this.messageListener) {\n        this.messageListener(this.stateManager.messages);\n      }\n    }\n  }, {\n    key: \"initMessenger\",\n    value: function () {\n      var _initMessenger = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return this.apiClient.postStartConversation();\n\n              case 3:\n                response = _context3.sent;\n\n                if (response) {\n                  this.stateManager.saveMessage(_objectSpread({}, response, {\n                    sender: \"bot\"\n                  }));\n                  this.pushUpdate();\n                }\n\n                _context3.next = 10;\n                break;\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](0);\n                throw new Error(\"An error occurred initializing messenger.\");\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 7]]);\n      }));\n\n      function initMessenger() {\n        return _initMessenger.apply(this, arguments);\n      }\n\n      return initMessenger;\n    }()\n  }, {\n    key: \"isOpen\",\n    get: function get() {\n      return this.stateManager.layout.isMessengerOpen;\n    }\n  }]);\n\n  return LightbotMessenger;\n}();\n\n//# sourceURL=webpack://lightbot/./src/messenger.ts?");

/***/ }),

/***/ "./src/state-manager.ts":
/*!******************************!*\
  !*** ./src/state-manager.ts ***!
  \******************************/
/*! exports provided: StateManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StateManager\", function() { return StateManager; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Internal State for State Manager\n * Some properties are not exposed, so it means the type should not be exposed either\n */\n\n/**\n * State Manager\n * is responsible for keeping messages and bot agent relative data.\n * Non critical information like messages and agent data is stored in browser storage.\n *\n * Session and User data should be kept under the control of the API - e.g. cookies.\n * WARNING: NEVER USE STATE MANAGER TO DEAL WITH CRITICAL DATA\n */\nvar StateManager =\n/*#__PURE__*/\nfunction () {\n  _createClass(StateManager, null, [{\n    key: \"getKey\",\n    value: function getKey(value) {\n      return \"\".concat(StateManager.salt).concat(value);\n    }\n  }]);\n\n  function StateManager() {\n    _classCallCheck(this, StateManager);\n\n    _defineProperty(this, \"state\", {\n      messages: [],\n      agent: {\n        isInitialized: false\n      },\n      layout: {\n        isMessengerOpen: false\n      }\n    });\n\n    this.initMessagesState();\n    this.initLayoutState();\n    this.initAgentState();\n  }\n\n  _createClass(StateManager, [{\n    key: \"saveMessage\",\n    value: function saveMessage(message) {\n      this.state.messages = this.state.messages.concat(message);\n      this.updateMessagesStorage();\n    }\n  }, {\n    key: \"popMessage\",\n    value: function popMessage() {\n      var message = this.state.messages.pop();\n      this.updateMessagesStorage();\n      return message;\n    }\n  }, {\n    key: \"updateLayout\",\n\n    /**\n     * Interface to override existing or create new layout property values\n     * @param layout Overrides to layout store\n     */\n    value: function updateLayout(layout) {\n      this.state.layout = Object.assign({}, this.state.layout, layout);\n      this.updateLayoutStorage();\n    }\n  }, {\n    key: \"updateAgent\",\n    value: function updateAgent(agent) {\n      this.state.agent = Object.assign({}, this.state.agent, agent);\n      this.updateAgentStorage();\n    }\n  }, {\n    key: \"initMessagesState\",\n    value: function initMessagesState() {\n      if (!this.testLocalStorage()) {\n        console.warn(\"An error occurred while initalizing message storage. LocalStorage is not available\");\n        return;\n      }\n\n      var messages = localStorage.getItem(StateManager.keys.messages);\n\n      if (!messages) {\n        localStorage.setItem(StateManager.keys.messages, this.serialize(this.state.messages));\n      } else {\n        try {\n          this.state.messages = this.deserialize(messages);\n        } catch (err) {\n          localStorage.setItem(StateManager.keys.messages, this.serialize(this.state.messages));\n          console.warn(\"An error occurred while initalizing message storage. The message history was reset\");\n        }\n      }\n    }\n  }, {\n    key: \"updateMessagesStorage\",\n    value: function updateMessagesStorage() {\n      if (!this.testLocalStorage()) {\n        return;\n      }\n\n      var messages = localStorage.getItem(StateManager.keys.messages);\n\n      if (!messages) {\n        localStorage.setItem(StateManager.keys.messages, this.serialize(this.state.messages));\n        console.warn(\"An error occurred while removing last message. The messages history was reset.\");\n        return;\n      }\n\n      localStorage.setItem(StateManager.keys.messages, this.serialize(this.state.messages));\n    }\n  }, {\n    key: \"initLayoutState\",\n    value: function initLayoutState() {\n      if (!this.testLocalStorage()) {\n        console.warn(\"An error occurred while initalizing layout storage. LocalStorage is not available.\");\n        return;\n      }\n\n      var layout = localStorage.getItem(StateManager.keys.layout);\n\n      if (!layout) {\n        localStorage.setItem(StateManager.keys.layout, this.serialize(this.state.layout));\n      } else {\n        try {\n          this.state.layout = this.deserialize(layout);\n        } catch (err) {\n          localStorage.setItem(StateManager.keys.layout, this.serialize(this.state.layout));\n          console.warn(\"An error occurred while initalizing layout storage. The layout was reset.\");\n        }\n      }\n    }\n  }, {\n    key: \"updateLayoutStorage\",\n    value: function updateLayoutStorage() {\n      if (!this.testLocalStorage()) {\n        return;\n      }\n\n      var layout = localStorage.getItem(StateManager.keys.layout);\n\n      if (!layout) {\n        localStorage.setItem(StateManager.keys.layout, this.serialize(this.state.layout));\n        console.warn(\"An error occurred while removing last message. The layout was reset.\");\n      }\n\n      localStorage.setItem(StateManager.keys.layout, this.serialize(this.state.layout));\n    }\n  }, {\n    key: \"initAgentState\",\n    value: function initAgentState() {\n      if (!this.testLocalStorage()) {\n        console.warn(\"An error occurred while initalizing agent storage. LocalStorage is not available.\");\n        return;\n      }\n\n      var agent = localStorage.getItem(StateManager.keys.agent);\n\n      if (!agent) {\n        localStorage.setItem(StateManager.keys.agent, this.serialize(this.state.agent));\n      } else {\n        try {\n          this.state.agent = this.deserialize(agent);\n        } catch (err) {\n          localStorage.setItem(StateManager.keys.agent, this.serialize(this.state.agent));\n          console.warn(\"An error occurred while initalizing agent storage. The agent was reset\");\n        }\n      }\n    }\n  }, {\n    key: \"updateAgentStorage\",\n    value: function updateAgentStorage() {\n      if (!this.testLocalStorage()) {\n        return;\n      }\n\n      var agent = localStorage.getItem(StateManager.keys.agent);\n\n      if (!agent) {\n        localStorage.setItem(StateManager.keys.agent, this.serialize([]));\n        throw new Error(\"An error occurred while updating agent. The agent was reset.\");\n      }\n\n      localStorage.setItem(StateManager.keys.agent, this.serialize(this.state.agent));\n    }\n    /**\n     * Returns true if LocalStorage is available\n     */\n\n  }, {\n    key: \"testLocalStorage\",\n    value: function testLocalStorage() {\n      if (this.state.isLocalStorageAvailable !== undefined) {\n        return this.state.isLocalStorageAvailable;\n      }\n\n      var testKey = \"localstorage_test_key\";\n      var testValue = \"localstorage_test_value\";\n\n      try {\n        localStorage.setItem(testKey, testValue);\n\n        if (localStorage.getItem(testKey) === testValue) {\n          localStorage.removeItem(testKey);\n          this.state.isLocalStorageAvailable = true;\n        }\n      } catch (err) {\n        this.state.isLocalStorageAvailable = false;\n      }\n\n      return this.state.isLocalStorageAvailable;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(value) {\n      return JSON.stringify(value);\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(value) {\n      return JSON.parse(value);\n    }\n  }, {\n    key: \"messages\",\n    get: function get() {\n      return this.state.messages;\n    }\n  }, {\n    key: \"layout\",\n    get: function get() {\n      return this.state.layout;\n    }\n  }, {\n    key: \"agent\",\n    get: function get() {\n      return this.state.agent;\n    }\n  }]);\n\n  return StateManager;\n}();\n\n_defineProperty(StateManager, \"salt\", \"19Hgw012xn!@\");\n\n_defineProperty(StateManager, \"keys\", {\n  messages: StateManager.getKey(\"messages\"),\n  agent: StateManager.getKey(\"agent\"),\n  layout: StateManager.getKey(\"layout\")\n});\n\n//# sourceURL=webpack://lightbot/./src/state-manager.ts?");

/***/ })

/******/ });
});