"use strict";

var _stateManager = require("./state-manager");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe("StateManager", function () {
  describe("localStorage unavailable", function () {
    it("not throw any error on constructor", function () {
      expect(new _stateManager.StateManager()).toThrowErrorMatchingSnapshot();
    });
    describe("messages", function () {
      var stateManager;
      beforeEach(function () {
        stateManager = new _stateManager.StateManager();
      });
      it("adds new message when message is saved", function () {
        var message = {
          sender: "human",
          label: "test message",
          type: "plain"
        };
        stateManager.saveMessages([message]);
        expect(stateManager.messages[0]).toMatchObject(message);
      });
      it("removes message when it pops", function () {
        stateManager.popMessage();
        expect(stateManager.messages[0]).toBeUndefined();
      });
    });
    describe("layout", function () {
      var stateManager;
      var initialLayout = {
        isMessengerOpen: false
      };
      var overrideLayout = {
        someValue: true
      };
      beforeEach(function () {
        stateManager = new _stateManager.StateManager();
        stateManager.updateLayout(initialLayout);
      });
      it("adds layout properties", function () {
        stateManager.updateLayout(overrideLayout);
        expect(stateManager.layout).toEqual(_objectSpread({}, initialLayout, overrideLayout));
      });
      it("overrides a property", function () {
        stateManager.updateLayout({
          isMessengerOpen: true
        });
        expect(stateManager.layout.isMessengerOpen).toBeTruthy();
      });
    });
  });
  describe("localstorage available", function () {
    beforeEach(function () {
      require("jest-localstorage-mock");

      localStorage.clear();
    });
    describe("with clean localStorage", function () {
      it("initializes empty messages storage", function () {
        expect(new _stateManager.StateManager().messages).toHaveLength(0);
      });
    });
    describe("constructor when existing localStorage", function () {
      var initialMessages;
      var initialLayout;
      var initialAgent;
      var stateManager;
      beforeEach(function () {
        initialMessages = [{
          type: "plain",
          sender: "bot",
          label: "Test message from bot"
        }];
        initialLayout = {
          isMessengerOpen: true
        };
        initialAgent = {
          isInitialized: true
        };
        localStorage.setItem(_stateManager.StateManager.keys.messages, JSON.stringify(initialMessages));
        localStorage.setItem(_stateManager.StateManager.keys.layout, JSON.stringify(initialLayout));
        localStorage.setItem(_stateManager.StateManager.keys.agent, JSON.stringify(initialAgent));
        stateManager = new _stateManager.StateManager();
      });
      it("initializes messages from localStorage", function () {
        expect(stateManager.messages).toEqual(initialMessages);
      });
      it("initializes layout from localStorage", function () {
        expect(stateManager.layout).toEqual(initialLayout);
      });
      it("initializes agent from localStorage", function () {
        expect(stateManager.agent).toEqual(initialAgent);
      });
    });
    describe("messages", function () {
      var stateManager;
      beforeEach(function () {
        stateManager = new _stateManager.StateManager();
      });
      it("adds new message when message is saved", function () {
        var message = {
          sender: "human",
          label: "test message",
          type: "plain"
        };
        stateManager.saveMessages([message]);
        expect(stateManager.messages[0]).toMatchObject(message);
      });
      it("removes message when it pops", function () {
        stateManager.popMessage();
        expect(stateManager.messages[0]).toBeUndefined();
      });
    });
    describe("layout", function () {
      var stateManager;
      var initialLayout = {
        isMessengerOpen: false
      };
      var overrideLayout = {
        someValue: true
      };
      beforeEach(function () {
        stateManager = new _stateManager.StateManager();
        stateManager.updateLayout(initialLayout);
      });
      it("adds layout properties", function () {
        stateManager.updateLayout(overrideLayout);
        expect(stateManager.layout).toEqual(_objectSpread({}, initialLayout, overrideLayout));
      });
      it("overrides a property", function () {
        stateManager.updateLayout({
          isMessengerOpen: true
        });
        expect(stateManager.layout.isMessengerOpen).toBeTruthy();
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,